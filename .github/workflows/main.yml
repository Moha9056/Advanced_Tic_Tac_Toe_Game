name: CI/CD Pipeline - Advanced Tic Tac Toe

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  BUILD_DIR: "build"

jobs:
  build-and-test:
    name: Build and Test (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        # Explicitly define dependencies per OS
        include:
          - os: ubuntu-latest
            qt-pkg: qt6-base-dev
            install-cmd: sudo apt-get install -y
          - os: windows-latest
            qt-pkg: qt6
            install-cmd: choco install

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up CMake
        uses: actions/setup-cmake@v3

      - name: Install dependencies
        run: |
          if [ "${{ matrix.os }}" == "ubuntu-latest" ]; then
            sudo apt-get update
            ${{ matrix.install-cmd }} ${{ matrix.qt-pkg }} g++ cmake
          else
            ${{ matrix.install-cmd }} ${{ matrix.qt-pkg }} cmake --confirm
          fi

      - name: Configure project
        run: |
          mkdir -p ${{ env.BUILD_DIR }}
          cd ${{ env.BUILD_DIR }}
          cmake ..

      - name: Build project
        run: |
          cd ${{ env.BUILD_DIR }}
          cmake --build . --config Release

      - name: Run tests
        working-directory: ${{ env.BUILD_DIR }}
        run: |
          if [ "${{ runner.os }}" == "Windows" ]; then
            ctest -C Release --output-on-failure
          else
            ctest --output-on-failure
          fi

  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    needs: build-and-test  # Wait for build jobs
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Clang-Tidy
        run: |
          mkdir -p ${{ env.BUILD_DIR }}
          cd ${{ env.BUILD_DIR }}
          cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=ON ..
          run-clang-tidy -checks='modernize-*,readability-*'

      - name: Run Cppcheck
        run: |
          cppcheck --enable=all --suppress=missingIncludeSystem \
                  --suppress=unusedFunction --inline-suppr src/
