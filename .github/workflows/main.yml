name: CI/CD Pipeline - Advanced Tic Tac Toe

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:  # Allow manual triggers

env:
  BUILD_DIR: "build"
  COVERAGE_DIR: "build-coverage"
  RELEASE_DIR: "release-build"

jobs:
  build-and-test:
    name: Build and Test (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            qt-pkg: qt6-base-dev
            install-cmd: sudo apt-get install -y
          - os: windows-latest
            qt-pkg: qt6
            install-cmd: choco install
          - os: macos-latest
            qt-pkg: qt
            install-cmd: brew install

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up CMake
        uses: actions/setup-cmake@v3

      - name: Install dependencies
        run: |
          if [ "${{ matrix.os }}" == "ubuntu-latest" ]; then
            sudo apt-get update
          fi
          ${{ matrix.install-cmd }} ${{ matrix.qt-pkg }} g++ cmake

      - name: Configure project
        run: |
          mkdir -p ${{ env.BUILD_DIR }}
          cd ${{ env.BUILD_DIR }}
          cmake ..

      - name: Build project
        run: |
          cd ${{ env.BUILD_DIR }}
          cmake --build . --config Release

      - name: Run tests
        working-directory: ${{ env.BUILD_DIR }}
        run: |
          if [ "${{ runner.os }}" == "Windows" ]; then
            ctest -C Release --output-on-failure
          else
            ctest --output-on-failure
          fi

  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    needs: build-and-test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python (for cpp-linter)
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Run Clang-Tidy
        run: |
          mkdir -p ${{ env.BUILD_DIR }}
          cd ${{ env.BUILD_DIR }}
          cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=ON ..
          run-clang-tidy -checks='modernize-*,readability-*'

      - name: Run Cppcheck
        run: |
          cppcheck --enable=all --suppress=missingIncludeSystem \
                  --suppress=unusedFunction --inline-suppr src/

      - name: Check Google C++ Style
        uses: cpp-linter/cpp-linter-action@v2
        with:
          style: google
          extensions: cpp,hpp
          exclude: third_party/

  coverage:
    name: Test Coverage
    runs-on: ubuntu-latest
    needs: build-and-test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install coverage tools
        run: sudo apt-get install -y lcov gcovr

      - name: Build with coverage
        run: |
          mkdir -p ${{ env.COVERAGE_DIR }}
          cd ${{ env.COVERAGE_DIR }}
          cmake -DCMAKE_BUILD_TYPE=Debug -DCOVERAGE=ON ..
          cmake --build .

      - name: Generate coverage report
        working-directory: ${{ env.COVERAGE_DIR }}
        run: |
          ctest --output-on-failure
          lcov --capture --directory . --output-file coverage.info
          lcov --remove coverage.info '/usr/*' '*/tests/*' --output-file filtered.info
          genhtml filtered.info --output-directory coverage-report
          gcovr --xml-pretty --exclude-unreachable-branches --print-summary -o coverage.xml

      - name: Upload coverage report
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: ${{ env.COVERAGE_DIR }}/coverage-report

      - name: Upload coverage XML (for Codecov)
        uses: codecov/codecov-action@v3
        with:
          file: ${{ env.COVERAGE_DIR }}/coverage.xml

  deploy:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build-and-test, code-quality, coverage]
    if: github.ref == 'refs/heads/main'  # Only deploy from main branch
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build release version
        run: |
          mkdir -p ${{ env.RELEASE_DIR }}
          cd ${{ env.RELEASE_DIR }}
          cmake -DCMAKE_BUILD_TYPE=Release ..
          cmake --build . --config Release --target package

      - name: Upload release artifact
        uses: actions/upload-artifact@v3
        with:
          name: tic-tac-toe-release
          path: ${{ env.RELEASE_DIR }}/*.tar.gz

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: ${{ env.RELEASE_DIR }}/*.tar.gz
