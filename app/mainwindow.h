#ifndef MAINWINDOW_H
#define MAINWINDOW_H

#include <QWidget>
#include <QPoint>        // For QPoint (used for AI moves)
#include <QPushButton>   // For QPushButton (board cells)
#include <QStringList>   // For QStringList (move history, replay moves)
#include <QLineEdit>     // For QLineEdit (input fields)
#include <QTimer>        // For QTimer (AI delay, replay timer)
#include <QRadioButton>  // For QRadioButton (AI difficulty)
#include <QListWidgetItem> // For QListWidgetItem (game history list)
#include <QVariantMap>   // For QVariantMap (data from DatabaseManager)
#include <QCheckBox>     // For QCheckBox (show password)
#include <QDateTime>     // For QDateTime (timestamps in history)
#include <QSettings>     // For persistent session management

// REPLACED: Removed 'class DatabaseManager;' forward declaration.
// ADDED: Include the full header for DatabaseManager as it's directly used.
#include "DatabaseManager.h" // Include the full definition of DatabaseManager

// Keep GameLogic as a forward declaration if GameLogic.h is not fully included here
class GameLogic;                   // Declare GameLogic

// Forward declarations to avoid including full headers unnecessarily in the header.
// The actual definitions will be included in mainwindow.cpp.
namespace Ui { class MainWindow; } // Declare Ui::MainWindow


class MainWindow : public QWidget
{
    Q_OBJECT // Macro required for all classes that define signals or slots

public:
    explicit MainWindow(QWidget *parent = nullptr);
    ~MainWindow();

private slots:
    // Page navigation slots (directly tied to UI buttons for navigation)
    void on_loginButton_clicked();
    void on_signupLoginPageButton_clicked();
    void on_loginButtonSignupPage_clicked();
    void on_noWorriesButton_clicked();
    void on_backButtonReset_clicked();
    void on_backButtonAccount_clicked();
    void on_logoutButtonAccount_clicked();
    void on_backButtonGamePage_clicked();
    void on_backButtonHistory_clicked();
    void on_playerVsAiButton_clicked();
    void on_playerVsPlayerButton_clicked();
    void on_myAccountButton_clicked();
    void on_myGameHistoryButton_clicked();
    void on_changePasswordButton_clicked();

    // User action slots (interact with logical/data classes)
    void on_registerButton_clicked();
    void on_resetPasswordButton_clicked();
    void on_deleteGameButton_clicked();
    void on_replayGameButton_clicked();
    void replayNextMove(); // Handles the step-by-step animation of game replay

    // Show/Hide Password Checkboxes slots
    void on_showLoginPasswordCheckBox_toggled(bool checked);
    void on_showSignupPasswordCheckBox_toggled(bool checked);
    void on_showResetNewPasswordCheckBox_toggled(bool checked);

    // Game Board interaction slots
    void on_resetGameboardButton_clicked();
    void handleBoardClick(); // General slot for all 9 board buttons

    // Slots to receive signals from GameLogic (to update the UI)
    void onBoardChanged(int row, int col, int player); // Updates a single cell on the UI board
    void onGameEnded(const QString& winner, const QStringList& moves); // Handles game over UI updates
    void onCurrentPlayerChanged(int player); // Updates the status label and enables/disables board

private:
    Ui::MainWindow *ui; // Pointer to the UI object generated by Qt Designer
    DatabaseManager *dbManager; // Pointer to the database manager instance
    GameLogic *gameLogic;       // Pointer to the game logic instance

    QString currentUser;     // Stores the username of the currently logged-in user
    QTimer *replayTimer;     // Timer for animating game replays
    QStringList replayMoves; // Stores the moves for the current replay
    int replayIndex;         // Current index in the replayMoves list

    // UI utility methods (encapsulate direct UI manipulation)
    void togglePasswordVisibility(QLineEdit* lineEdit, bool visible);
    void setupConnections(); // Centralized function for connecting all signals and slots
    void resetBoardUI();     // Resets the visual state of the game board buttons
    QPushButton* getButton(int row, int col); // Helper to get a QPushButton by its grid coordinates
    void disableGameboardUI(); // Disables all game board buttons
    void enableGameboardUI();  // Enables only empty game board buttons
    void updateGameboardUI();  // (Currently not fully implemented, could be used for full board redraw)
    void updateAccountInfoUI(const QVariantMap& userInfo); // Updates account info labels
    void loadGameHistoryUI(); // Populates the game history list widget
};

#endif // MAINWINDOW_H
